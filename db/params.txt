:param .*?\n\s*:para


    :param size:  (w,h) w=characters-wide, h=rows-high
    :type size: Tuple[int, int]

    :param file_types: List of extensions to show using wildcards. All files (the default) = (("ALL Files", "*.*"),)
    :type file_types: Tuple[Tuple[str,str]]

    :param yes_no: If True, displays Yes and No buttons instead of Ok
    :type yes_no: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    ===============

    :param *args: Variable number of items to display
    :type *args: (Any) 
    :param title: Title to display in the window.
    :type title: (str)
    :param button_type: Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK).
    :type button_type: (enum)

    :param button_color:  button color (foreground, background)
    :type button_color: Tuple[str, str]
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)

    :param auto_close:  if True window will close itself
    :type auto_close:  (bool)
    :param auto_close_duration: Older versions only accept int. Time in seconds until window will close
    :type auto_close_duration: Union[int, float]

    :param non_blocking: if True the call will immediately return rather than waiting on user input
    :type non_blocking: (bool)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param line_width: Width of lines in characters
    :type line_width: (int)

    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]

    
    :return: Returns text of the button that was pressed.  None will be returned if user closed window with X
    :rtype: Union[str, None, TIMEOUT_KEY]


    :param pad: Amount of padding to put around element in pixels (left/right, top/bottom)
    :type pad: (int, int) or ((int,int),(int,int))

===============================
===============================
===============================
===============================

    :param message:  message displayed to user
    :type message: (str)
    :param title:  Window title
    :type title: (str)
    :param default_path: path to display to user as starting point (filled into the input field)
    :type default_path: (str)
    :param no_window:  if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown
    :type no_window: (bool)
    :param size: (width, height) of the InputText Element
    :type size: Tuple[int, int] 
    :param button_color:  button color (foreground, background)
    :type button_color: Tuple[str, str]
    :param background_color: color of background
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param initial_folder:  location in filesystem to begin browsing
    :type initial_folder: (str)
    :return: string representing the path chosen, None if cancelled or window closed with X
    :rtype: Union[str, None]


    :param message:  message displayed to user
    :type message: (str)
    :param title:  Window title
    :type title: (str)
    :param default_path: path to display to user as starting point (filled into the input field)
    :type default_path: (str)
    :param default_extension:  If no extension entered by user, add this to filename (only used in saveas dialogs)
    :type default_extension: (str)
    :param save_as: if True, the "save as" dialog is shown which will verify before overwriting
    :type save_as: (bool)
    :param multiple_files:  if True, then allows multiple files to be selected that are returned with ';' between each filename
    :type multiple_files: (bool)
    :param file_types: List of extensions to show using wildcards. All files (the default) = (("ALL Files", "*.*"),)
    :type file_types:  Tuple[Tuple[str,str]] 
    :param no_window:  if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown
    :type no_window:  (bool)
    :param size: (width, height) of the InputText Element
    :type size: Tuple[int, int]
    :param button_color: Color of the button (text, background)
    :type button_color: Tuple[str, str]
    :param background_color: background color of the entire window
    :type background_color: (str)
    :param text_color: color of the text
    :type text_color: (str)
    :param icon: filename or base64 string to be used for the window's icon
    :type icon: Union[bytes, str]
    :param font: specifies the font family, size, etc
    :type font: Union[str, Tuple[str, int]]
    :param no_titlebar: If True no titlebar will be shown
    :type no_titlebar: (bool)
    :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
    :type grab_anywhere: (bool)
    :param keep_on_top:  If True the window will remain above all current windows
    :type keep_on_top: (bool)
    :param location:  Location of upper left corner of the window
    :type location: Tuple[int, int]
    :param initial_folder:  location in filesystem to begin browsing
    :type initial_folder: (str)
    :return: string representing the file(s) chosen, None if cancelled or window closed with X
    :rtype: Union[str, None]

=====================================
=====================================
=====================================

        :param title: text to display in eleemnt
        :type title: (str)
        :param current_value: current value
        :type current_value: (int)
        :param max_value: max value of QuickMeter
        :type max_value: (int)
        :param key: Used with window.FindElement and with return values to uniquely identify this element
        :type key: Union[str, int, tuple]
        :param *args: stuff to output
        :type *args: (Any)
        :param orientation:  'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical' / 'v')
        :type orientation: (str)
        :param bar_color:  color of a bar line
        :type bar_color: str
        :param button_color:  button color (foreground, background)
        :type button_color: Tuple[str, str]
        :param size:  (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)
        :type size: Tuple[int, int]
        :param border_width: width of border around element
        :type border_width: (int)
        :param grab_anywhere: If True: can grab anywhere to move the window (Default = False)
        :type grab_anywhere: (bool)
